Create a web-based, highly interactive application called CodeQuest where students can learn the fundamentals of C programming through a series of engaging, hands-on challenges. The app will feature an intuitive drag-and-drop interface for beginner students, allowing them to visually construct C programs before diving into text-based coding. It should feel like a game, motivating students to progress through tasks while providing immediate feedback, tutorials, and hints. The app should have a clean, colorful, and modern UI, with the primary color being #18CB96 (Emerald Green) to give it a fresh, energetic vibe.Core Features:Interactive Code Blocks:Drag-and-drop blocks that visually represent C code structures such as variables, loops, conditionals, and functions.Blocks will automatically convert to corresponding C code in the background (e.g., a loop block will turn into for or while in C).Allow students to manipulate and test their code in a sandbox environment.Code Execution & Instant Feedback:Students can press a Run Code button to execute their code and see the result in an interactive terminal.If there’s an error in the code, highlight the issue (e.g., missing semicolons, incorrect syntax).Provide helpful error messages and explanations so students can learn from their mistakes.Task-Based Learning:Task Panel: Each task should have a description with clear goals (e.g., "Write a program that prints 'Hello, World!'" or "Create a simple calculator").Progression: Tasks should start with basic concepts (variables, loops) and become more complex as students progress (functions, file I/O).Include challenges where students earn points and badges after successfully completing tasks.Real-Time Code Editor:An interactive editor (similar to a coding playground) where students can directly write C code.Syntax highlighting and autocomplete to help students learn the correct structure.Ability to run the code and get immediate results/output in an interactive terminal panel.Hints & Tooltips:Tooltips appear when students hover over elements (blocks, variables, etc.), providing useful tips for writing correct code.A Hint Button that shows hints if a student gets stuck.A Learn More section that links to mini-tutorials or articles explaining C concepts in detail.Leaderboard & Achievements:Students can track their progress by earning points for completing tasks and challenges.Implement a simple Leaderboard to gamify learning. Students can compete with their peers based on completed tasks, badges earned, or coding speed.Include badges like "First Code", "Loop Master", "Conditional Champion", etc.Responsive & Modern UI:Use a clean and minimalistic layout with vibrant colors. The main interface should focus on clarity and ease of use.The app should be responsive, so it works well on both desktops and mobile devices.The primary color #18CB96 should dominate the UI, with complementary colors for the background, buttons, and interactive elements.Code Sharing & Collaboration:Allow students to share their code with friends or instructors. Enable collaborative learning through a simple share feature, allowing students to view each other's code and provide feedback.Integrate a comment section where students can discuss the task and get peer feedback.UI Design Suggestions:1. Homepage:Hero Section: A welcoming section with a catchy tagline like "Start Your C Programming Adventure" with a big Get Started button.Color: Use #18CB96 for primary CTA buttons, headings, and some background sections for an engaging feel.Interactive Preview: Provide a quick preview of the drag-and-drop blocks or the terminal for students to get a sense of what they will be doing.2. Code Editor Page:Side Panel: On the left, have a panel with task instructions and a progress bar. The panel should be interactive and show a simple description of the current task.Main Editor: In the center, a large space where students can write and test their code. Below the editor, provide a Run Code button and a Reset button.Code Output Terminal: Below the editor, have a terminal that shows
the output of the code execution. This will change depending on what the student wrote (error messages, output from printf, etc.).Color Scheme:Primary Color: #18CB96 for the background of buttons, call-to-action elements, and highlights.Secondary Colors: Use complementary shades like dark grey for text, white for the editor area, and light green/blue for the terminal/output section.3. Task Panel:Show the task’s objective at the top (e.g., “Create a program that checks if a number is even or odd”).A Progress Bar: To show how much of the challenge the student has completed (e.g., "2/3 Steps Complete").Code Snippets: Offer students example snippets they can drag into the editor as starting points.Hints: An icon that shows helpful hints or links to tutorials.